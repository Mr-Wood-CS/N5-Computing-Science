{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"National 5 Computing Science","text":"Welcome to SQA National 5 Computer Science! <p>This course will introduce you to the exciting world of technology, where you\u2019ll learn how computers work, how to design software, and how to manage data. We\u2019ll cover three main units: Software Design and Development, Computer Systems, and Database Design and Development.</p> <p>In Software Design and Development, you\u2019ll learn how to think like a programmer, creating and testing programs to solve problems. We\u2019ll explore coding basics, developing your skills to write and troubleshoot code effectively.</p> <p>The Computer Systems unit dives into what\u2019s inside a computer and how it works. You\u2019ll learn about hardware, software, and how they work together, along with a look into how data is stored and processed.</p> <p>Finally, in Database Design and Development, you\u2019ll learn how information is organized and stored. You\u2019ll create and manage databases, making it easy to store and access data effectively.</p> <p>By the end, you\u2019ll have a solid foundation in computer science, ready to explore more advanced topics or pursue a career in tech.</p>"},{"location":"CS/","title":"Computer Systems","text":""},{"location":"CS/01-Data-Rep/","title":"Data Representation","text":""},{"location":"DDD/","title":"Database Design and Development","text":"Module Outcomes Analysis Identify the end-user and functional requirements of a database problem that relates to the implementation at this level. Design Describe and identify the implications for individuals and businesses of the UK General Data Protection Regulation (UK GDPR) that data must be: <ul> <li>processed lawfully, fairly and in a transparent manner in relation to individuals.</li> <li>used for the declared purpose only</li> <li>limited to the data needed for the declared purpose</li> <li>accurate</li> <li>not kept for longer than necessary</li> <li>held securely</li> </ul>      Describe and exemplify entity-relationship diagrams with two entities indicating:     <ul> <li>entity name</li> <li>attribute name</li> <li>primary and foreign key</li> <li>attribute type:</li> <ul> <li>text</li> <li>number</li> <li>date</li> <li>time</li> <li>boolean</li> </ul> <li>attribute size</li> <li>validation:</li> <ul> <li>presence check</li> <li>restricted choice</li> <li>field length</li> <li>range</li> </ul> </ul>      Exemplify a design of a solution to the query:     <ul> <li>multiple tables</li> <li>fields</li> <li>search criteria</li> <li>sort order</li> </ul> Implementation    Implement relational databases with two linked tables, to match the design with referential integrity.    Describe, exemplify and implement SQL operations for pre-populated relational databases, with a maximum of two linked tables:   <ul> <li>select</li> <ul> <li>from</li> <li>where:</li> <ul> <li>AND, OR, &lt;, &gt;, = </li> <li>order by with a maximum of two fields</li> </ul> </ul> <li>insert</li> <li>update</li> <li>delete</li> <li>equi-join between tables</li> </ul>    Read and explain code that makes use of the above SQL.         Testing      Describe and exemplify testing: <ul> <li>SQL operations work correctly at this level</li> </ul> Evaluation      Evaluate solution in terms of: <ul> <li>fitness for purpose</li> <li>accuracy of output</li> </ul>"},{"location":"DDD/1.1-End-User-Requirements/","title":"End User Requirements","text":"<p>End user requirements are what the end users want to use the database for.</p> <p>From this 2019 question, you could say that the end user requirements include:</p> <ul> <li> <p>Club leaders need to be able to add new activities</p> </li> <li> <p>Club leaders need to know who which adults have a first aid qualification</p> </li> <li> <p>Club leaders need to be able to find activities members are registered for</p> </li> <li> <p>Club leaders need to be able to see all members listed alphabetically</p> </li> </ul> <p>Always write your answer like this:</p> <p>The club leader needs \u2026</p> <p>Or</p> <p>The shop staff need \u2026</p> <p>Or</p> <p>The school headteacher needs\u2026</p> <p>Top Tip</p> <p>Keep the focus on the end user - what do they want to use the database for?</p>"},{"location":"DDD/1.2-Functional-Requirements/","title":"Functional requirements","text":"<p>The <code>Functional Requirements</code> are what the database needs to be able to do. </p> <p>These can be:</p> <ul> <li> <p>What entities and attributes are needed (what tables and fields)</p> </li> <li> <p>What queries are needed to search/sort the data</p> </li> </ul> <p>In the youth club example, functional requirements could include:</p> <ul> <li> <p>Needs a table to store details about leaders, including whether they have a first aid qualification</p> </li> <li> <p>Needs a tables for members and activities</p> </li> <li> <p>Needs a query to show members, sorted alphabetically by town \u2003 For functional requirements, always write your answer like:</p> </li> </ul> <p>The database needs a table about \u2026</p> <p>Or</p> <p>The database needs a query to ...</p> <p>This will help you to structure your answer, and makes it less likely you\u2019ll confuse end-user and functional requirements.</p>"},{"location":"DDD/1.3-General-Data-Protection-Regulation/","title":"The General Data Protection Regulation (GDPR)","text":"<p>The General Data Protection Regulation (GDPR) is a law that covers how your data is stored and used.</p> <p>In some older notes, you may see it referred to as the Data Protection Act - this name changed in 2018, and you should use GDPR instead.</p> <p>You need to know about the implications of GDPR - for individuals and businesses/organisations.</p> <p>The data subject is the person whose data is being stored - for example, in the school register database, pupils are the data subjects, as the data is about them. The person in control of the data is called the data controller.</p> <p>There is a declared purpose - what the data is being used for. </p> <p>For example, in a school, the declared purpose might be that we store the register data to check attendance. </p> <p>That is the declared purpose of our database.</p> <p>You need to know six implications (consequences) of GDPR:</p> <ul> <li> <p>Data must be processed lawfully, fairly and transparently (this means being open about it)</p> </li> <li> <p>Data must be used for the declared purpose only</p> </li> <li> <p>Only the data needed for the declared purpose should be collected.</p> </li> <li> <p>Data must be accurate</p> </li> <li> <p>Data must not be kept for longer than necessary</p> </li> <li> <p>Data must be held securely</p> </li> </ul> <p>Example</p> <p>For the 2019 youth club question, you would have to identify two implications and link them to the youth club. </p> <p>Note - they would have to be implications for the youth club, not the members.</p> <p>For example:</p> <ul> <li> <p>They must only collect data needed for running the club</p> </li> <li> <p>They must only use the data for the declared purpose (running the club)</p> </li> <li> <p>Data must be deleted if members leave the club</p> </li> <li> <p>Data cannot be shared without the members\u2019 permission</p> </li> </ul> <p><code>You would receive one mark for each implication.</code></p>"},{"location":"DDD/2.1-Entities-and-Attributes/","title":"Entities and Attributes","text":""},{"location":"DDD/2.1-Entities-and-Attributes/#explanation","title":"Explanation","text":"<p>A database can have more than one table. </p> <p>When we we are working with more than one table it is called an Entity and Entities are made up of Attributes and Records.</p>"},{"location":"DDD/2.1-Entities-and-Attributes/#attributes","title":"Attributes","text":"<p>An Attribute holds one piece of data at a time - e.g. a person\u2019s name, age or phone number.</p>"},{"location":"DDD/2.1-Entities-and-Attributes/#records","title":"Records","text":"<p>A record holds a complete set of data.</p>"},{"location":"DDD/2.2-Primary-and-Foreign-Keys/","title":"Primary And Foreign Keys","text":""},{"location":"DDD/2.2-Primary-and-Foreign-Keys/#primary-keys","title":"Primary keys","text":"<p>The primary key is a field that uniquely identifies each record. </p> <p>Example</p> <ul> <li> <p>Everyone has a unique SQA candidate number.</p> </li> <li> <p>Cars have a unique registration.</p> </li> </ul> <p>At National 5 you need to be able to identify the primary key from a given table.</p>"},{"location":"DDD/2.2-Primary-and-Foreign-Keys/#foriegn-keys","title":"Foriegn Keys","text":"<p>When a field from one table or entity appears in another table or entity, it is called a foreign key.</p> <p>The foreign key is a field that both tables have in common.</p> <p>Example</p> <ul> <li>MovieID is the primary key for Movie, </li> </ul> <p>and </p> <ul> <li>DirectorID is the primary key for Director.</li> </ul> <p>Because DirectorID - <code>the primary key from Director</code> - also appears in the Movie table, that makes it a <code>foreign key</code>.</p>"},{"location":"DDD/2.3-Referential-Integrity/","title":"Referential Integrity","text":"<p>When two tables are linked with primary/foreign keys, it is important to maintain referential integrity.</p> <p>In the movies example, every Movie record has a DirectorID that tells us which director directed the movie.</p> <p>If we delete one of the directors, while one of the movies is supposedly directed by that person, the movie will point to a director who doesn\u2019t exist. That would break referential integrity.</p> <p>Referential integrity is the extent to which the data in both tables \u2018matches\u2019. </p> <p>You will not be asked for a definition! </p> <p>You could be asked what would happen if data in one table is removed or changed, or what kind of error could occur if data is removed or changed.</p>"},{"location":"DDD/2.4-Data-Dictionaries/","title":"Data Dictionaries","text":"<p>The data dictionary helps us to plan the content of a table.</p> <p>You need to be able to complete a data dictionary with blanks in it.</p> <p>You\u2019re unlikely to have to write the whole data dictionary from scratch.</p> <p>The attribute name is the name of the field, e.g., ProductName.</p> <p>Only one field can be the primary key (PK). You can\u2019t have more than one primary key in a table at National 5.</p> <p>When a primary key from another table is \u2018borrowed\u2019 into this table, it is marked as the foreign key (FK).</p> <p>The attribute types are:</p>"},{"location":"DDD/2.5-Validation/","title":"Types of Validation","text":"<p>There are four types of validation we need to know for National 5:</p>"},{"location":"DDD/2.5-Validation/#presence-check","title":"Presence check","text":"<p>Checks that a field can\u2019t be left blank.</p> <p>This is common on a form, when you don\u2019t want fields left blank.</p> <p>Write \u201cpresence check\u201d in the validation column.</p> <p>Length check    Checks that the data must be a certain length, e.g. a password has to be at least 6 characters, or a car registration must be exactly 7 characters.</p> <p>Write \u201clength check\u201d in the validation column: \u25cf   Length check, = 6 characters \u25cf   Length check, &gt;= 5 characters \u25cf   Length check, &gt;= 3 and &lt;= 7 Range check Range checks that a number or date is between two points - for example, that a star rating is between 1 and 5.</p> <p>Write \u201crange check\u201d in the validation column: \u25cf   Range check, &gt; 5 \u25cf   Range check, &lt; 10 \u25cf   Range check, &gt;= 1 and &lt;= 5 Restricted choice   Restricted choice is when you only want the user to choose between options. For example:</p> <p>\u25cf   A person\u2019s title being Mr, Mrs, Dr, Rev, etc. \u25cf   Pupils in a class list sitting only N4, N5 or Higher \u25cf   A product only comes in certain colours. A customer chooses which colour they want when ordering.</p>"},{"location":"DDD/2.6-Entity-Relationship-Diagrams/","title":"Database Relationships (One to Many)","text":"<p>Database relationships can be shown in the form of a diagram. </p> <p>This diagram is known as an 'entity relationship diagram'. </p> <p>As part of your exam, you will have to either draw or interpret one of these diagrams. </p> <p>A one-to-many relationship is the most common type of relationship between database entities. In this type of relationship, a row in table A can have many matching rows in table B, but a row in table B can have only one matching row in table A. </p> <p>For example, the publishers and titles tables have a one-to-many relationship: each publisher produces many titles, but each title comes from only one publisher.</p> <p>Think about a mother and her children. A mother can have many children. A child can have only one mother. </p> <p>Dog Walkers is a company that walks dogs when their owners are at work. The company has a database to store details of the dogs, their owners and the walkers. The data is stored in the following tables.</p> <p>The one-to-many relationships that exist between the tables are:</p> <ul> <li> <p>Walker and Walk - there is only one walker to many walks. For example, a dog walker can do many different walks.</p> </li> <li> <p>Dog and Walk - there is one dog to many walks. For example, one dog can go on many different walks.</p> </li> <li> <p>Owner and Dog - there is one owner to many dogs. For example, one owner may have many different dogs.</p> </li> </ul> <p>Mother and Child Full Example</p>"},{"location":"SDD/","title":"Unit 1 - Software Design and Development","text":"<p>Welcome to Software Design and Development, one of the most exciting parts of the SQA National 5 Computing Science course! </p> <p>Here, you\u2019ll learn how the apps, games, and programs you use every day are made\u2014and get to create some of your own. </p> <p>Whether you\u2019re into gaming, solving puzzles, or just curious about how programming works, this unit covers it all.  </p> <p>Think about your favorite app or game. Behind the scenes, someone had to plan how it works, design how it looks, and write the instructions (called code) to make it all happen. </p> <p>That\u2019s software design and development in action! </p> <p>It\u2019s like building something from scratch but using your brain and a computer instead of bricks and mortar.  </p> <p>In this part of the course, we\u2019ll explore how software is created step by step. </p> <p>You\u2019ll learn how to break problems into smaller chunks, think logically, and solve challenges creatively. </p> <p>You\u2019ll also get hands-on programming experience with Python, where you\u2019ll write your own code to make interactive programs.  </p> <p>But it\u2019s not just about writing code.</p> <p>We\u2019ll also look at how to design programs so they\u2019re easy to use, spot and fix mistakes (debugging), and make sure everything works as planned. </p> <p>These skills aren\u2019t just for programmers\u2014they\u2019re useful for lots of careers and even everyday life. </p> <p>Don\u2019t worry if you\u2019ve never written a line of code before. Everyone starts somewhere, and you\u2019ll get plenty of guidance. </p> <p>By the end of this unit, you\u2019ll have the tools to bring your own ideas to life. Who knows? You might even create the next big app or game!  </p>"},{"location":"SDD/1.0-Development-Methodologies/","title":"Development Methodologies","text":""},{"location":"SDD/1.0-Development-Methodologies/#what-is-a-software-development-methodology","title":"What is a Software Development Methodology?","text":"<p>To answer this, we will split the question into two parts, Software and Development Methodology.</p> <p>As you already know, all computer systems are made up of hardware and software.</p> <p>The term hardware is easy to understand, because you can touch it. For example, the processor, RAM, network adaptor and graphic cards etc...</p> <p>Software, however, is not so obvious\u2026\u2026\u2026\u2026\u2026\u2026</p> <p>Software is all the programs, instructions and data that allow the hardware to do something useful and interesting. Some of the most used include; word, excel, PowerPoint &amp; Google (other browsers are available!)</p> <p>Tip</p> <p>Software Development is defined as the process of designing, creating, testing, and maintaining computer programs and applications. There are many different  Software Development Methodologies that all follow a different path through the Development Process. </p>"},{"location":"SDD/1.0-Development-Methodologies/#the-waterfall-method","title":"The Waterfall Method","text":"<p>The development methodology you will be learning is known as a Waterfall model which consists of SIX different steps.</p> <p>A benefit of the Waterfall Methodology is that we can go back a step if there is a problem and fix it before then repeating the steps in order until we have the full working solution.</p>"},{"location":"SDD/1.0-Development-Methodologies/#the-six-stages-of-development","title":"The Six Stages of Development","text":""},{"location":"SDD/1.0-Development-Methodologies/#analysis","title":"Analysis","text":"<p>What is the purpose of the program? </p> <p>What features will it have? (This is known as functional requirements)</p> <p>What are the inputs, process and outputs?</p> <p>What data structures and data types will be used?</p>"},{"location":"SDD/1.0-Development-Methodologies/#design","title":"Design","text":"<p>The more planning you do the quicker the creation of the final product will be</p> <p>Break a problem into chunks </p> <p>Use diagrams to create and algorithm</p> <p>Pseudocode, Structure Diagrams and Flowcharts</p>"},{"location":"SDD/1.0-Development-Methodologies/#implementation","title":"Implementation","text":"<p>Create the solution to the problem</p> <p>Use previously designed Algorithms to signpost the way</p>"},{"location":"SDD/1.0-Development-Methodologies/#testing","title":"Testing","text":"<p>All work needs to be checked thoroughly for errors. </p> <p>Rigorous testing to systematically check every single operation/event.</p> <p>Rigorously test a range of scenarios to make sure the program does what it is supposed to.</p>"},{"location":"SDD/1.0-Development-Methodologies/#documentation","title":"Documentation","text":"<p>Collate diagrams, algorithms and testing tables.</p> <p>These documents together form the wider documentation (user guide &amp; technical guide).</p> <p>It is important that documentation is clear.</p> <p>Documentation should also show what each person did and what has happened thus far. </p>"},{"location":"SDD/1.0-Development-Methodologies/#evaluation","title":"Evaluation","text":"<p>Fit for Purpose - does it do what it is supposed to do?</p> <p>Efficient use of Coding Constructs  - correct use of repetition, arrays (instead of variables) and selection statements where possible to reduce the amount of code?</p> <p>Robustness \u2013 can it cope with unexpected or incorrect input?</p> <p>Readability - it is important to write code that can be read and understood by others. This should include internal commentary, meaningful identifiers, indentation and white space.</p>"},{"location":"SDD/10-Arrays-Explanation/","title":"Explanation","text":"<p>Imagine you have been asked to create a program that asks for 3 test scores, adds them together, and prints out the total.</p> <p>It could probably start with something like this:</p> <pre><code>score1 = int(input(\"Please enter first score\"))\nscore2 = int(input(\"Please enter second score\"))\nscore3 = int(input(\"Please enter third score\"))\n</code></pre> <p>What happens when we need a program that asks for 20 scores? Or 100? </p> <p>We could write out every variable, but it would be a very long program, and the chance for mistakes is high. </p> <p>Instead, we need an array.</p> <p>An array is simaler to a variable. </p> <p>Only this variable, can store multiple values. </p> <p>This is called an array. Where a normal variable stores data in one memory location , an array reserves a whole set of memory locations, one after the other. </p> <p>In <code>Python</code> an array is known a list:</p> <p>In the example array above, there are 9 elements. Each item makes up one element of the array. </p> <p>We start counting the elements from 0 (instead of 1). </p> <p>So element 0 in that array is 15, element 1 is 20, and element 7 is 19 and so on.</p> <p>Like variables, arrays have data types (a string array, an integer array, a Boolean array, etc.)</p> <p>When you see the term data structure, this refers to a variable or an array.</p>"},{"location":"SDD/10.1-Initialising-an-Array/","title":"Initialising an Array","text":"<p>If we know what the initial values of the array are, we can state them in the code. </p> <p>Consider the list of  scores from earlier:</p> <p>We would write this at the start of the program:</p> <pre><code>scores = [15, 20, 19, 18, 17, 20, 16, 19, 12]\n</code></pre>"},{"location":"SDD/10.2-Accessing-Elements-in-an-Array/","title":"Accessing Elements in an Array","text":"<p>If we want to use one of the elements in the array, we can refer to it by number.</p> <p>So, to get 18 from the list of scores (element 3), we would say:</p> <p><pre><code>scores = [15, 20, 19, 18, 17, 20, 16, 19, 12]\n\nfind_score = scores[3]\n</code></pre> We put the number of the element in square brackets. </p> <p>Remember that element numbers start at zero.</p> <p>It doesn\u2019t ,however, need to be a literal number in the square brackets. </p> <p>If we had a variable (this one is called counter), we could put that in the square brackets to get the <code>\u201ccounter-nth\u201d</code> element:</p> <pre><code>scores = [15, 20, 19, 18, 17, 20, 16, 19, 12]\n\ncounter = 4\n\nprint(scores[counter])\n</code></pre> <p>The above program would output the <code>4th element</code>, <code>17</code></p>"},{"location":"SDD/10.3-Changing-the-Values-in-an-Array/","title":"Changing the Values in Array","text":"<p>In addition, we can also change the data stored in each element, including with calculations:</p> <pre><code>scores = [15, 20, 19, 18, 17, 20, 16, 19, 12]\n\nscores[0] = 17\nscores[1] = 19\nscores[4] = scores[2]\nscores[5] = 5 * 3\nscores[6] = scores[2] + 1\n</code></pre> <p>The updated list would now look like this:</p> <pre><code>scores = [17, 19, 19, 18, 19, 15, 20, 19, 12]\n</code></pre>"},{"location":"SDD/10.4-Appending-to-an-Array/","title":"Appending to an Array","text":"<p>Python <code>append()</code> function enables us to add an element to the end of an array. </p> <p>You would use Python <code>append()</code> when you are adding to new items to the end of a list</p> <pre><code>scores = [15, 20, 19, 18, 17, 20, 16, 19, 12]\n\nscores.append(56)\n</code></pre> <p>The updated list would now look like this:</p> <pre><code>scores = [17, 19, 19, 18, 19, 15, 20, 19, 12, 56]\n</code></pre>"},{"location":"SDD/10.5-Example/","title":"Example","text":"<p>The Library Program</p> CodePseudocodeSQA Reference LanguageExplanation <pre><code>favorite_books = [\"Harry Potter\", \"The Hobbit\", \"1984\", \"To Kill a Mockingbird\", \"The Great Gatsby\"]\n\nprint(\"The first book in the list is:\", favorite_books[0])\n\nprint(\"The third book in the list is:\", favorite_books[2])\n\nfavorite_books[3] = \"Pride and Prejudice\"\n\nprint(\"The updated list of books is:\", favorite_books)\n</code></pre> <pre><code>&gt; Main Steps\n\n1.0 - Create days of the week array\n2.0 - Display and update books\n3.0 - Output updated book list\n\n&gt; Refinements\n\n1.1 - Create array\n1.2 - Add Harry Potter, The Hobbit, 1984, To Kill a Mockingbird and The Great Gatsby to array\n\n2.1 - Ouput message and the book title that is first in the list.\n2.2 - Ouput message and the book title that is third in the list.\n2.3 - Replace book 3 with Pride and Prejudice\n</code></pre> <pre><code>DECLARE favorite_books INITIALLY [\"Harry Potter\", \"The Hobbit\", \"1984\", \"To Kill a Mockingbird\", \"The Great Gatsby\"]\n\nSEND \"The first book in the list is: \" &amp; favorite_books[0] TO DISPLAY\n\nSEND \"The third book in the list is: \" &amp; favorite_books[2] TO DISPLAY\n\nSET favorite_books[3] TO \"Pride and Prejudice\"\n\nSEND \"The updated list of books is: \" &amp; favorite_books TO DISPLAY\n</code></pre> <p><code>Line 1</code></p> <p>Initialise the favorite_books list to hold five book titles. </p> <p>Each number in the list represents a temperature reading.</p> <p><code>Line 3</code></p> <p>The program directly accesses the element at index ([0] for the first book and [2] for the third book). </p> <p><code>Line 5</code></p> <p>The program directly accesses the element at index [2].</p> <p><code>Line 7</code></p> <p>The program assigns a new value to favorite_books at the index value[3]</p> <p><code>Line 9</code> </p> <p>The program outputs the <code>updated</code>list of books.</p>"},{"location":"SDD/2.0-Analysis/","title":"Explanation","text":"<p>What do you Need to Know</p> <p>Identify the purpose and functional requirements of a problem that relates to the design and implementation at this level, in terms of:</p> <ul> <li> <p>inputs </p> </li> <li> <p>processes</p> </li> <li> <p>outputs</p> </li> </ul> <p>The main goal of the analysis stage is to identify the functional requirements - what the program has to be able to do.</p>"},{"location":"SDD/2.1-Functional-Requirements/","title":"Functional Requirements (Inputs, Processes and Outputs)","text":"<p><code>Inputs</code> are what goes \u2018in\u2019 to the program - a common example would be anything the user is asked to type in.</p> <p><code>Processes</code> are the \u2018thinking\u2019 done by the program. It might be a calculation (adding to a score), checking something (has the player won yet?) or any other \u2018thinking\u2019 the program has to do.</p> <p><code>Outputs</code> are what goes \u2018out\u2019 of the program - for National 5, these are often  messages printed on the screen.</p> <p><code>Example 1:</code></p> <p>You\u2019ve been asked to write a program that asks for the name and age of everyone in the class. It then calculates the average, and displays that on the screen.</p> <ul> <li> <p>The inputs are the names and ages.</p> </li> <li> <p>The process is calculating the average.</p> </li> <li> <p>The output is the average that is displayed.</p> </li> </ul> <p><code>Example 2:</code></p> <p>You have been asked to write a program for a GPS car navigation system. The program asks the user for their destination. It connects to a satellite to get its current position. It calculates a route, and tells the user how long it expects the journey to take, as well as displaying the route on a map.</p> <ul> <li> <p>The inputs are the user\u2019s destination, and the satellite position.</p> </li> <li> <p>The process is calculating the route.</p> </li> <li> <p>The outputs are how long the journey should take and the displayed map.</p> </li> </ul>"},{"location":"SDD/3.0-Design/","title":"Explanation","text":"<p>What you Need to Know</p> <p>Identify the data types and structures required for a problem that relates to the implementation at this level, as listed below.</p> <p>Describe, identify, and be able to read and understand:</p> <ul> <li> <p>structure diagrams</p> </li> <li> <p>flowcharts</p> </li> <li> <p>pseudocode</p> </li> </ul> <p>Exemplify and implement one of the above design techniques to design efficient solutions to a problem.</p> <p>Describe, exemplify, and implement user-interface design, in terms of input and output, using a wireframe.</p> <p>Efficient problem-solving in computing begins with careful planning and the use of appropriate design techniques to ensure solutions are both effective and easy to implement. </p> <p>A key aspect of this process involves identifying the data types and structures required to solve a problem. These choices are critical, as they influence how efficiently a program can handle inputs, process data, and deliver outputs.</p> <p>To design and understand solutions, several tools and techniques are used:</p> <ul> <li> <p>Structure diagrams provide a visual breakdown of a system, showing its components and how they interact.</p> </li> <li> <p>Flowcharts illustrate the logical flow of processes, making it easier to follow the sequence of steps within an algorithm.</p> </li> <li> <p>Pseudocode bridges the gap between natural language and programming by offering a simplified, language-agnostic way to represent a solution.</p> </li> </ul> <p>In addition, user-interface design (<code>wireframes</code>) are another essential element that usees simple sketches or digital drafts that outline the layout of a user interface, detailing how input and output are managed.</p>"},{"location":"SDD/3.1-Identifying-Data-Types-and-Structures/","title":"Identifying Data Types and Structures","text":"<p>Data types are important when programming. The computer has to know whether to expect numbers, text, or other types of values. </p> <p>There are five data types for National 5:</p> <p>If you are given an example, you need to be able to say which data type it belongs to.</p> <p>We could look at the data types in terms of the inputs, processes, and outputs from our analysis.</p> <p>Example</p> <p>You have been asked to create a program asks the user for the names and ages of everyone in the class. When finished, it displays a message saying how many people are in the class, and their average age.</p> <p>If you were asked to explain the data types used in this program, in the exam, you would say something like:</p> <ul> <li> <p>The <code>names</code> are <code>strings</code>, because they are <code>text</code></p> </li> <li> <p>The <code>ages</code> are <code>integers, e.g. someone is</code>15` years old</p> </li> <li> <p>The number of people in the class is an <code>integer</code>, because you can\u2019t have <code>0.5</code> of a person</p> </li> <li> <p>The average is a <code>real</code> number, because it might have a <code>decimal point</code> in it.</p> </li> </ul> <p>The last point is really important - quite often, you could be asked to calculate an average. </p> <p>Think about it yourself - if three people are 15, 15 and 16, those are integers - but the average is 15.333, a real number.</p> <p>Remeber to fully think through the problems!</p> <p>The data types are really important, because we\u2019ll be talking about them all the time during this topic. You\u2019ll be using and discussing these five basic types in every program.</p>"},{"location":"SDD/3.2-Structure-Diagrams/","title":"Structure Diagrams","text":"<p>A structure diagram (or structure chart) is the first design notation. </p> <p>We use these to break down the task into smaller chunks.</p> <p>The structure diagram is useful for showing the sequence of steps needed to solve the problem. It is always read from top-to-bottom and left-to-right.</p> Example 1 <p>You have been asked to create a program that asks for the user\u2019s username and password, checks if they are correct, and tells them whether or not they have been granted access.</p> <ul> <li> <p>We start with the main task/problem, and put this in the top box.</p> </li> <li> <p>We can break the structure diagram into roughly three parts: the <code>inputs</code>, the <code>process</code> and the <code>outputs</code>.</p> </li> </ul> <p>These have to be done in order from left to right:</p> <ol> <li>Get the username and password</li> <li>Check if they are valid</li> <li>Tell the user if they have access</li> </ol> <p> </p> <p>However, we can break this diagram down further. </p> <p>The first step (get the username and password) can be broken down into two more blocks: </p> <ul> <li> <p>get the username</p> </li> <li> <p>get the password</p> </li> </ul> <p> </p> Example 2 <p>You have been asked to create a program that asks for two numbers, calculates the total and displays the total on screen.</p> <ul> <li> <p>We start with the main task/problem, and put this in the top box.</p> </li> <li> <p>We can break the structure diagram into roughly three parts: the <code>inputs</code>, the <code>process</code> and the <code>outputs</code>.</p> </li> </ul> <p>These have to be done in order from left to right:</p> <ol> <li>Get the two numbers</li> <li>Calculate the total</li> <li>Display the total on screen</li> </ol> <p> </p> <p>So far, you structure diagrams have used the same symbol (process, meaning it does something).</p> <p>There are four different symbols that can be used on a structure diagram.</p> <p>Look at the example below to see how they can be used.</p> Example 3 <p>You have been asked to create a program that asks for five numbers, calculates the total and displays the total on screen.</p> <ul> <li> <p>We start with the main task/problem, and put this in the top box.</p> </li> <li> <p>We can break the structure diagram into roughly three parts: the <code>inputs</code>, the <code>process</code> and the <code>outputs</code>.</p> </li> </ul> <p>These have to be done in order from left to right:</p> <ol> <li>Get the five numbers</li> <li>Calculate the total</li> <li>Display the total on screen</li> </ol> <p> </p>"},{"location":"SDD/3.3-Flowcharts/","title":"Flowcharts","text":"<p>Flowcharts are used to show the sequence of steps in a program. We read the flowchart from top-to-bottom, following the arrows.</p> <p>You can use a flowchart with any program, but they are good for clearly showing decisions and loops.</p> <p>Flowcharts don\u2019t have a specific symbol for loops. Instead, they have to show a loop as a decision, with the arrows going up/backwards.</p> <p>In this example, if the password is not correct, the program shows an error message, and then the arrow points back towards asking for the password again. </p> <p>This loop will continue until the user enters a correct password, breaking the loop.</p> <p>Info</p> <p>Some people prefer flowcharts to other notations, and others don\u2019t. </p> <p>According to the course spec, you should never be in a position where you have to draw a flowchart from scratch: you usually have a choice of at least two design notations (e.g. a flowchart or a structure diagram). </p> <p>However, you do need to be able to read and understand a flowchart, and answer questions on one that you are given.</p>"},{"location":"SDD/3.4-Pseudocode/","title":"Pseudocode","text":"<p>Pseudocode (pronounced sudo-code) is a way of planning your program line-by-line, without writing actual code. </p> <p>Key Points</p> <p>Pseudocode isn\u2019t as strict as a real programming language. </p> <p>We write pseudocode in English. </p> <p>There are no fixed rules for how it should look. </p> <p>So long as you break the problem down into steps, and your meaning is clear, you can be awarded the marks.</p> <p>You will get more used to seeing pseudocode as you work on practical tasks, as lots of the examples will use it for their design.</p> <p>The SQA gives the following example of pseudocode to calculate the volume of a swimming pool.</p> <p>First, we break the problem down into steps:</p> <ol> <li> <p>Ask user to enter dimensions of the swimming pool in metres</p> </li> <li> <p>Calculate volume of pool (<code>length * width * depth</code>)</p> </li> <li> <p>Display message stating the volume of the pool</p> </li> </ol> <p>For step 1 (ask the user to enter dimensions), we can break this down further into <code>1.1</code>, <code>1.2</code> and <code>1.3</code>. </p> <p>These are called refinements. </p> <p>Each refined line could later be translated straight into a line of program code.</p> <p><code>1.1</code> Ask user to enter length</p> <p><code>1.2</code> Ask user to enter width</p> <p><code>1.3</code> Ask user to enter height</p>"},{"location":"SDD/3.5-Designing-a-User-Interface/","title":"Wireframe Diagrams","text":"<p>For software development, all you have to do is sketch a (<code>rough</code>) interface based on the inputs and outputs.</p> <p>The actual programs we create in Python don\u2019t have buttons. However, you can draw a wireframe design with buttons and textboxes if you wish.</p> <p>In practice, most of your program interfaces will be made up of lines of text:</p> <pre><code>Please enter your name: John\nPlease enter how many tickets you would like: 5\n\nYou have asked for 5 tickets. That will cost \u00a325\n</code></pre> <p>In this example, there are two inputs (name and number of tickets), and one output (the cost).</p> <p>All you have to do is draw a (<code>reasonable</code>) interface with the right inputs and outputs. </p> <p>If you were asked to draw an interface for a calculator program, that asks for two numbers, and multiplies the result, it could be something like:</p> <pre><code>Please enter first number:________\nPlease enter second number:_______ \n\nTotal multiplied is_______________\n</code></pre>"},{"location":"SDD/4.0-Software-Implementation/","title":"Software Implementation","text":""},{"location":"SDD/4.1-Input-and-Output/","title":"Input and Output","text":""},{"location":"SDD/4.1-Input-and-Output/#python-comments","title":"Python Comments","text":"<p>All of the programs you see will have lines that start with #</p> <p>Example</p> <pre><code># This is a comment\n# The computer ignores lines that start with this symbol\n</code></pre> <p>The computer ignores lines that start with a #. </p> <p>We call these Internal Comments.  </p> <p>It is good practice to write these comments in your code, to remind you what particular parts do.</p> <p>Info</p> <p>At National 5, you will be expected to use comments in your code.</p>"},{"location":"SDD/4.1-Input-and-Output/#print-statement","title":"Print Statement","text":"<p>During most National 5 programs, you will be asked to display things on the screen. In Python, you do this with the print() statement.</p> <p>Example</p> <pre><code>print (\"Hello world\")\nprint (\"Welcome to\", \"National 5\")\nprint (\"My name is\", name)\n</code></pre> <p>In the brackets, put the message you want to print. </p> <p>If you want to display a variable, do not use quotation marks:</p> <p>Example</p> <pre><code>print(age)\nprint(name)\n</code></pre> <p>Note</p> <p>This would print whatever is in the variable, not the word age or name.</p> <p>If you want to print a string and a variable, use a comma between the strings:</p> <p>Example</p> <pre><code>print(\"Welcome to\", \"National 5\")\nprint(\"My name is\", name)\n</code></pre>"},{"location":"SDD/4.1-Input-and-Output/#input-statement","title":"Input Statement","text":"<p>When you want the user to enter data, use an input statement.</p> <p>Example</p> <pre><code># When you input a string\nname = input(\"Please enter your name\")\n</code></pre> <p>This shows a message on the screen 'Please enter your name' and asks the user to type in some data. The data they enter is stored in a variable.</p> <p>Example</p> <pre><code># Enter some data from the keyboard\nname = input(\"Please enter your name\")\n\ntitle = input(\"Enter book title\")\nauthor = input(\"Enter book author\")\ngenre = input(\"Enter book genre\")\n</code></pre> <p>Info</p> <p>The input statement will be used in almost all of your programs.</p>"},{"location":"SDD/4.1-Input-and-Output/#input-with-numbers","title":"Input with Numbers","text":"<p>When you input numbers, there is an extra step you must take.</p> <p>Any data that you input is automatically assumed to be a string.</p> <p>Strings can contain any sort of characters, including digits.</p> <p>Note</p> <p>It's important, if we want to use the data as a number (for example, doing a calculation with it) that we cast (convert) it from string to a number type.</p> <p>Example</p> <pre><code># When you input a string\nname = input(\"Please enter your name\")\n\n# When you input an integer number, use int( )\nage = int(input(\"Enter age\"))\n\n# When you input a real number, use float( )\nprice = float(input(\"Enter price\"))\n</code></pre>"},{"location":"SDD/4.11-Traversing-a-1d-Array/","title":"Traversing an Array","text":""},{"location":"SDD/4.11-Traversing-a-1d-Array/#explanation","title":"Explanation","text":"<p>We know that arrays are used for storing a list of data.</p> <p>The key benfit of arrays is that they reduce repetition. For example:</p> Without an Array<pre><code>var_1 = 1\nvar_2 = 2\nvar_3 = 3\nvar_4 = 4\nvar_5 = 5\n</code></pre> With an Array<pre><code>var_numbers = [1,2,3,4,5]\n</code></pre> <p>We also know that loops are used to reduce repetition in our lines of code. For example: </p> <p>We can use a loop to traverse the array - that means, to travel through it, or loop through it.</p> <p>Traversing an array is one of the standard algorithms.</p> <p>Without a Loop<pre><code>print (1)\nprint (2)\nprint (3)\nprint (4)\nprint (5)\n</code></pre> With a Loop<pre><code>for i in range(1,6):\n    print (i)\n</code></pre></p> <p>The Steps to This Algorithm are:</p> <pre><code>1.0 - Start a for loop, for the number of elements in the array\n        2.0 - Use the array element[counter]\n3.0 - End for loop\n</code></pre>"},{"location":"SDD/4.11-Traversing-a-1d-Array/#using-a-loop-to-traverse-an-array","title":"Using a Loop to Traverse an Array","text":"<p>In programming we use loops to traverse the elements of an array. </p> <p>Example: </p> <p>The Snow White Program</p> CodeExplanation <pre><code>names = [\u201cDopey\u201d, \u201cGrumpy\u201d, \u201cDoc\u201d, \u201cBashful\u201d, \u201cSneezy\u201d, \u201cSleepy\u201d, \u201cHappy\u201d]\n\nfor counter in range(0, 7):\n    print(names[counter])\n</code></pre> <p><code>Line 1</code></p> <p>Initialise the names list to hold 7 names.</p> <p><code>Line 2</code></p> <p>Start a loop that from 0 to 6 and print the name</p> <p><code>Line 4</code></p> <p>On each <code>iteration of the loop</code> output the data that is held within that element of the array.</p> <p>Remember</p> <p>Remember that the word counter is just a variable name. </p> <p>It could be anything:</p> <pre><code>names = [\u201cDopey\u201d, \u201cGrumpy\u201d, \u201cDoc\u201d, \u201cBashful\u201d, \u201cSneezy\u201d, \u201cSleepy\u201d, \u201cHappy\u201d]\n\nfor bannanas in range(0, 7):\n    print(names[bannanas])\n</code></pre>"},{"location":"SDD/4.12-Running-Total-Within-a-Loop/","title":"Running Total Within a Loop","text":""},{"location":"SDD/4.12-Running-Total-Within-a-Loop/#explanation","title":"Explanation","text":"<p>The running total in a loop algorithm (or running total) is used to keep a running total of some numbers.</p> <p>These numbers can be either:</p> <ul> <li> <p>Values entered by the user</p> </li> <li> <p>A list of values in an array</p> </li> </ul> <p>In addition, a running total will typically use a fixed loop. </p> <p>Running Total Algorithm</p> <pre><code>1.0 - Set total to 0\n\n2.0 - Start a for loop (with a loop counter)\n        3.0 - Add current item to the total or increase total by 1 depending on the program.\n4.0 - End for loop\n</code></pre>"},{"location":"SDD/4.12-Running-Total-Within-a-Loop/#running-total-from-user-input","title":"Running total from User Input","text":"<p>In this example, the user is asked to enter ten numbers. </p> <p>As each number is entered, it is added to the total. </p> <p>The programmer might then choose to display this total at the end:</p> <p>Pseudocode Example:</p> <pre><code>1.0 - Set total to 0\n\n2.0 - For counter from 0 to 9\n        3.0 - Get number from user\n        4.0 - Set total to total + number\n5.0 - End for loop\n</code></pre> <p>Running Total From User Input</p> CodeExplanation <pre><code>total = 0\n\nfor counter in range(0, 10):\n    num = (int(input(\"Enter number\"))\n    total = total + num         \n</code></pre> <p><code>Line 1</code></p> <p>Create a variable called total and set it to 0.</p> <p><code>Line 3</code></p> <p>This line starts a loop that will run 10 times.</p> <p>The for loop also creates another variable called <code>counter</code> which counts from <code>0 to 9</code> (10 numbers in total).</p> <p><code>Line 4</code></p> <p>Ask the user to input a number.</p> <p><code>Line 5</code> </p> <p>Update the total by adding the number you just entered (num) to whatever is already in total.</p> <p>For example: If total is <code>5</code> and you enter <code>3</code>, the new total becomes <code>5 + 3 = 8</code>.</p>"},{"location":"SDD/4.12-Running-Total-Within-a-Loop/#running-total-from-an-array","title":"Running Total from an Array","text":"<p>Below is an array of five daily temperatures:</p> <p>The name of the array is <code>temps[]</code></p> <p>We want to add up a total of all these temperatures. </p> <p>The algorithm reads one value at a time from the array, and adds it to the current total variable.</p> <p>The Steps to This Algorithm are:</p> <pre><code>1.0 - Add values to the array \n2.0 - Set total to 0\n\n3.0 - Start a for loop (with a loop counter)\n        4.0 - Add current item from the array to the total\n5.0 - End for loop\n\n6.0 - Display total\n</code></pre> <p>Running Total From an Array</p> CodeExplanation <pre><code>temps =  [18.2, 19.1, 20.1, 19.8, 21.4]\ntotal = 0.0\n\nfor counter in range(len(temps)):\n    total = total + temps[counter]\n\nprint (total)\n</code></pre> <p><code>Line 1</code></p> <p>Creates a list called temps that contains five temperature values (in degrees). </p> <p>Each number in the list represents a temperature reading.</p> <p><code>Line 2</code></p> <p>Initialises a variable called total to 0.0. </p> <p>It will be used to store the sum of all the temperatures in the list.</p> <p><code>Line 4</code></p> <p>Starts a for loop that goes through each index of the <code>temps</code> list.</p> <ul> <li> <p>len(temps) gives the length of the list, which is 5 in this case.</p> </li> <li> <p>range(len(temps)) creates a sequence of numbers from 0 to 4 (the indices of the list).</p> </li> <li> <p>The variable counter will take each of these values (0, 1, 2, 3, and 4) one by one during the loop.</p> </li> </ul> <p><code>Line 5</code> </p> <p>Inside the loop, the program adds the temperature at the current index (temps[counter]) to the total. For example:</p> <ul> <li> <p>On the first iteration (counter = 0), it adds temps[0] (18.2) to total.</p> </li> <li> <p>On the second iteration (counter = 1), it adds temps[1] (19.1) to total.</p> </li> <li> <p>This continues for all the temperatures in the list.</p> </li> </ul> <p><code>Line 7</code> </p> <p>After the loop finishes (all temperatures have been added to total), the program outputs the total sum of the temperatures.</p>"},{"location":"SDD/4.12-Running-Total-Within-a-Loop/#running-total-within-a-conditional-loop","title":"Running Total within a Conditional Loop","text":"<p>Very rarely, you might be asked to use a running total with a conditional loop (while). </p> <p>A question like this was used in the 2019 exam (Q19b). </p> <p>he only change is that you use a while / conditional loop instead of a fixed loop.</p> <p>This example asks the user to keep entering numbers, until the overall total reaches 100 or more.</p> <p>The Steps to This Algorithm are:</p> <pre><code>1.0 - Set total to 0\n\n2.0 - While total is less than 100\n        3.0 - Ask user to input a number\n        4.0 - Set total to total + number\n5.0 - End for loop\n</code></pre> <p>Running Total within a Conditional Loop</p> CodeExplanation <pre><code>total = 0\n\nwhile total &lt; 100:\n    num = (int(input(\"Enter number\"))\n    total = total + num\n</code></pre> <p><code>Line 1</code></p> <p>Create a variable called <code>total</code> and set it to 0.</p> <p><code>Line 3</code></p> <p>Start a loop that will run whilst <code>total</code> is less than 100.</p> <p><code>Line 4</code></p> <p>Ask the user to input a number.</p> <p><code>Line 5</code> </p> <p>Update the total by adding the number you just entered (num) to total.</p>"},{"location":"SDD/4.13-Input-Validation/","title":"Input Validation","text":"<p>When you\u2019re filling in a form - on a website, for example - it will often contain input validation. </p> <p>This means that it checks you have entered the right type of data in each place. </p> <p>Note: it\u2019s not checking that the data is actually correct, just that it is the right sort of data. If it wants a number, it (hopefully)  won\u2019t let you enter \u201chello123dinosaur$\u201d</p> <p>Other everyday examples of input validation:</p> <ul> <li> <p>Your password must be (for example) at least 6 characters long.</p> </li> <li> <p>Your age must be an integer (whole number) and cannot be less than 0.</p> </li> <li> <p>A percentage that cannot be less than 0 or greater than 100</p> </li> </ul> <p>Input validation will always use a conditional loop. The steps of this algorithm are:</p> <pre><code>1.0 - Ask the user to input something\n\n2.0 - Start a while loop, while the input does not meet the condition (e.g. while age &lt; 15)\n\n        3.0 - Show an error message\n\n        4.0 - Ask the user to input (again)\n\n5.0 - End while loop\n</code></pre> <p>Below is an example of an Input Validation <code>Standard Algorithm</code> that is required at National 5. </p> <p>Number Check Program (using simple conditional statements)</p> CodeExplanation <pre><code>user_input = int(input(\"Please enter a number that is greater the 14\"))\n\nwhile user_input &lt; 16:\n\n    print(\"Sorry, your number must be greater than 15\")\n\n    user_input = int(input(\"Please enter a valid number\")) \n\nprint(\"Number accepted.\")\n</code></pre> <p><code>Line 1</code></p> <p>The program asks the user to enter a number greater than 15.</p> <p><code>Line 3</code></p> <p>A Conditional Loop (<code>while loop</code>) checks if the inputted number is less than 16.</p> <p><code>Line 5</code></p> <p>If <code>line 3</code> = true, the program informs the user that the number must be greater than 15.</p> <p><code>Line 7</code> </p> <p>The program asks the user to input another number.</p> <p><code>Line 9</code> </p> <p>If the number is greater than 15 <code>Number accepted is displayed</code> outside of the while loop. </p> <p>Important</p> <p>If <code>Number accepted</code>is placed inside the while loop, your program will become stuck in an indefinate loop! This is an easy way to fail your practical assessment. Remember to always double check your code!</p>"},{"location":"SDD/4.13-Input-Validation/#input-validation-using-complex-conditional-statements","title":"Input Validation Using Complex Conditional Statements","text":"<p>Using the above as a template, we can now edit our program to include more advanced programming techniques.</p> <p>Number Check Program (using complex conditional statements)</p> CodeExplanation <pre><code>user_input = int(input(\"Please enter a number between 1 and 10: \"))\n\nwhile user_input &lt; 1 and user_input &gt; 10:\n\n    print(\"Sorry, your number must be greater than 0 and less than 11\")\n\n    user_input = int(input(\"Please enter a valid number\")) \n\nprint(\"Number accepted.\")\n</code></pre> <p><code>Line 1</code></p> <p>The program asks the user to enter a valid age</p> <p><code>Line 3</code></p> <p>A while loop checks if the entered age is less than 15.</p> <p><code>Line 4</code></p> <p>If <code>line 3</code> = true, the program informs the user that they must be 15 or over.</p> <p><code>Line 3</code> </p> <p>The program asks the user to enter their age again.</p>"},{"location":"SDD/4.13-Input-Validation/#real-world-example","title":"Real World Example","text":"<p>User Account Login Program</p> CodeExplanation <pre><code>username = \"user1\"\npassword = \"pass1\"\n\nattempts = 0\naccount_access = False\n\nwhile attempts &lt; 3:\n\n    user_username = input(\"Please enter your username: \")\n    user_password = input(\"Please enter your password: \")\n\n    if user_username == username and user_password == password:\n\n        print(\"Username and Password Accepted\")\n\n        account_access = True\n\n        break\n\n    else:\n        print(\"Incorrect, please try again\")\n\n        attempts = attempts + 1\n\nif not account_access:\n\n    print(\"Too many attempts. Account locked. Please try later\")        \n</code></pre> <p><code>Line 1</code></p> <p>Sets the correct username to <code>user1</code>.</p> <p><code>Line 2</code></p> <p>Sets the correct password to <code>pass1</code>. </p> <p><code>Line 4</code></p> <p>Keeps track of how many times you have tried to log in. </p> <p>At the start, you haven't tried yet, so it is set to <code>0</code>.</p> <p><code>Line 5</code> </p> <p>This is like a switch that starts as <code>off</code>.</p> <p>It will only turn <code>on</code> (become True) if you enter the correct username and password.</p> <p><code>Line 7</code> </p> <p>Start of the conditional loop that will keep running as long as you've tried fewer than 3 times. </p> <p>Once you reach 3 tries, the loop stops.</p> <p><code>Line 9</code> </p> <p>The user is asked to input their username.</p> <p>This is stored in the user_username <code>variable</code>.</p> <p><code>Line 10</code> </p> <p>The user is asked to input their password.</p> <p>This is stored in the user_password <code>variable</code>.</p> <p><code>Line 12</code> </p> <p>Performs a check to see if the input (user_username and user_password) matches the correct username and password. </p> <p>Both must be correct to continue.</p> <p><code>Line 14</code> </p> <p>If both the <code>username</code> and <code>password</code> are correct, the \"Username and Password Accepted\" message is ouputted. </p> <p><code>Line 16</code> </p> <p>This turns the <code>switch</code> to <code>on</code> and lets the program know that you now have access to your account.</p> <p><code>Line 18</code> </p> <p>This stops the loop because you have successfully logged in.</p> <p><code>Line 20</code> </p> <p>If the username and password are incorrect, \u00e8lse`is selected.</p> <p><code>Line 21</code> </p> <p>Outputs the message \"Incorrect, please try again\"</p> <p><code>Line 23</code> </p> <p>Adds 1 to the <code>Attempts</code> variable.</p> <p>Doing so allows the program to keep track of how many times you\u2019ve tried to log in.</p> <p><code>Line 25</code> </p> <p>After the loop ends, the program checks if you managed to log in. <code>if not account_access</code> is simply asking \" Is user_access now set to True?\"</p> <p><code>Line 27</code></p> <p>As <code>account_access</code> is still set to <code>False</code> the message \"Too many attempts. Account locked. Please try later\" is outputted.</p>"},{"location":"SDD/4.2-Variables-and-Data-Types/","title":"Variables and Data Types","text":""},{"location":"SDD/4.2-Variables-and-Data-Types/#what-are-variables","title":"What are Variables?","text":"<p>A variable is something that can be assigned a value.</p> <p>Example</p> <pre><code>x = 5\ny = 2\n</code></pre> <p>You will already have used similar in Maths. What is x + y? (the answer is 7)</p> <p>In computing however, we usually give them a longer (more meaningful) name, such as:</p> <p>Example</p> <pre><code>age = 15\nname = \"Bob\"\nemail = \"bob@gmail.com\"\n</code></pre>"},{"location":"SDD/4.2-Variables-and-Data-Types/#python-variable-naming-rules","title":"Python Variable Naming Rules","text":"<ul> <li>A variable name must start with a letter or the underscore character</li> <li>A variable name cannot start with a number</li> <li>A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )</li> <li>Variable names are case-sensitive (age, Age and AGE are three different variables)</li> <li>A variable name cannot be any of the Python keywords.</li> </ul> <p>and although this one is not a rule....</p> <ul> <li>It is important to use meaningful or sensible variable names. </li> </ul>"},{"location":"SDD/4.2-Variables-and-Data-Types/#types-of-variables","title":"Types of Variables","text":"<p>In programming variables have a particular type and for National 5 there are five data types that you need to know:</p> Data Type Description Integer Whole number: 12, -50, 100 Real number With a decimal point: 22.5, 0.001 String Words and symbols: hello, abc123 Character A single letter, digit or symbol: a, Z, $, # Boolean True (1) or False (0) <p>Warning</p> <p>Once a variable has been set up with a particular type, you can only assign it data of that type.</p> <p>Example</p> <pre><code># This is an integer\nmyage = int(15)\n\n# This is a real number\nprice = float(0.99)\n\n# This is a string\nfaveSubject = str(\"Computing\")\n\n# This is a character\nfirstInitial = char(\"F\")\n\n# This is a Boolean\nisStudent = bool(1)\n</code></pre>"},{"location":"SDD/4.2-Variables-and-Data-Types/#calculations","title":"Calculations","text":"<p>Python programs will often carry out calculations with operators. The result is usually stored in a variable:</p> <p>Example</p> <pre><code>num1 = 5\nnum2 = 7\nsum = num1 + num2\n</code></pre> <p>You can use the following operators:</p> <p>Example</p> <pre><code># Three variables\nnum1 = 5\nnum2 = 7\nsum = 0.0\n\n# Addition\nsum = num1 + num2\n\n# Subtraction\nsum = num1 - num2\n\n# Division\nsum = num1 / num2\n\n# Multiplication\nsum = num1 * num2\n\n# Raise to a power\nsum = num1 ** num2\n\n#Note that \u201craising to the power\u201d means, for example, num1**num2. \n\n#To square or cube a number, you would say:\nsquare = num1 ** 2\ncube = num1 ** 3\n</code></pre>"},{"location":"SDD/4.2-Variables-and-Data-Types/#string-concatenation","title":"String Concatenation","text":"<p>String concatenation is the term used when joining two strings.</p> <p>Example</p> <pre><code>word1 = \u201cHello\u201d\nword2 = \u201cWorld\u201d\n\nsentence = word1 + word2\n</code></pre> <p>Tip</p> <p>The example above doesn\u2019t include a space, you would have to add a space to the end of \u201cHello\u201d or the beginning of \u201cWorld\u201d.\u2003</p>"},{"location":"SDD/4.3-Simple-Conditional-Statements/","title":"Simple Conditional Statements","text":""},{"location":"SDD/4.3-Simple-Conditional-Statements/#selection-if-explanation","title":"Selection - If - Explanation","text":"<p>Programs have to make decisions.</p> <p>You have seen how these decisions can be represented on a flowchart (notice the diamond shapes with yes/no decisions).</p> <p>In National 5, you will often be asked to follow a design that has these decisions. You will implement the decisions in Python with if statements.</p>"},{"location":"SDD/4.3-Simple-Conditional-Statements/#if-statements","title":"If statements","text":"<p>Your programs will often react to something input by the user:</p> <p>The user is asked to enter a password. If they enter \u201chello123\u201d, access is granted.</p> <pre><code>    # Ask the user to enter a password\n    passwd = input(\"Please enter the password\")\n\n    # Is access granted?\n    if passwd == \u201chello123\u201d:\n        print(\"Access granted\")\n</code></pre> <p>The if statement always starts with the word if, followed by a condition. A condition checks that something is equal to, greater than or less than something else. In this case, it checks if passwd (what the user entered) is equal to the string \u201chello123\u201d.</p> <p>We use indentation for any code that we want to be inside the if statement (this means we tab it in). Notice that the print statement is tabbed in slightly from the left. This means that it only happens if the if statement above it is true. We could have multiple lines of code inside the if statement. The if statement always ends in a colon :</p> <p>** Note the use of the double-equals ==. We use two equals signs when checking for equality in an if statement. We can use the == signs for testing if any variable matches any other data. When our data is a number (whether it is an integer or a real number), we can see if it is less than or greater than another number **</p> Symbols Description <code>==</code> Equal to, e.g. 5 == 5, score == 12 or faveSubject == \"Computing\" <code>&lt;</code> Less than, e.g. 40 and 62 are both &lt; 99 <code>&gt;</code> Greater than, e.g. 50.4 and 85.1 are both &gt; 10.8 <code>&lt;=</code> Less than or equal to, e.g. 22 and 70 are both &lt;= 70 <code>&gt;=</code> Greater than or equal to, e.g. 100 and 105 are both &gt;= 100"},{"location":"SDD/4.3-Simple-Conditional-Statements/#multiple-selection-else-explanation","title":"Multiple Selection - Else - Explanation","text":"<p>Sometimes, we want the program to do something if data meets a condition, or otherwise, it is to do something else. This is called an else statement.</p> <p>A program could check that someone\u2019s age is greater than or equal to 17. If so, they are allowed to drive. </p> <p>If this is not so, they are not allowed to drive:</p> <p>Example</p> <pre><code>    # Ask the user for their age\n    age = int(input(\"Please enter your age\"))\n\n    # Old enough to drive?\n    if age &gt;= 17:\n        print(\"Broom broom\")\n    else:\n        print(\"Sorry, no drive yet\u201d)\n</code></pre> <p>In these examples, the program always does one thing, or the other. They are mutually exclusive. You cannot be both age &gt;= 17 and not &gt;= 17 at the same time, so only one branch of the decision is carried out.</p> <p>Note that, as before, the if and else statements end in a colon :</p> <p>The code that follows the if statement is indented (tabbed in). This means that it is only triggered if the if condition is true. The code after the else statement is indented. This means that the second print statement is only triggered if the condition is not true.</p>"},{"location":"SDD/4.3-Simple-Conditional-Statements/#multiple-selection-elif-example","title":"Multiple Selection - Elif - Example","text":"<p>Sometimes, information comes in multiple categories.</p> <p>We could ask for a test mark percentage. If the mark is greater than (or equal to) 70, the student gets an A. Otherwise, if their mark is greater than or equal to 60, they get a B. Otherwise (again), if their mark is greater than or equal to 50, they should get a C, and otherwise (finally) they receive no award.</p> <p>This could be represented on a flowchart:</p> <p>This is very efficient, because the program only needs to check for a B or C if the person did not get an A. If they did get enough marks for an A, the program never has to check those conditions.</p> <p>In Python, we create this with elif (short for else-if):</p> <p>Example</p> <pre><code>    # Ask for percentage mark\n    mark = int(input(\"Please enter percentage mark\"))\n\n    # Check which category mark goes in\n    if mark &gt;= 70:\n        grade = \u201cA\u201d\n    elif mark &gt;= 60:\n        grade = \u201cB\u201d\n    elif mark &gt;= 50:\n        grade = \u201cC\u201d\n    else:\n        grade = \u201cF\u201d\n\n    # Print the grade\n    print(grade)\n</code></pre> <p>Elif is followed by a new condition (e.g. \u201celse if mark is greater than or equal to 50\u2026\u201d)</p> <p>If the mark is not greater than or equal to 50, the only other option is the \u201celse\u201d branch, which sets grade to F.</p>"},{"location":"SDD/4.4-Complex-Conditional-Statements/","title":"Complex Conditional Statements","text":""},{"location":"SDD/4.4-Complex-Conditional-Statements/#explanation","title":"Explanation","text":"<p>Sometimes conditions can be more complicated. The logical operators and, or and not can be added to make complex conditions.</p> <p>Suppose we ask for a percentage, but it must be between 0 and 100. This could also be written as greater than or equal to 0, and less than or equal to 100.</p> <ul> <li>The number 53 meets this condition, because it is &gt;= 0, and it is &lt;= 100</li> <li>Although the number 110 is &gt;= 0, it is not &lt;= 100, so the condition is not true</li> <li>-273 is less than or equal to 100, but it is not &gt;= 0, so the condition is not true</li> </ul>"},{"location":"SDD/4.4-Complex-Conditional-Statements/#and","title":"<code>and</code>","text":"<p>Check if two conditions are both true</p> <p>Example</p> <pre><code>    if age &gt;= 17 and age &lt;= 100:\n        print(\u201cYou are between 17 and 100\u201d)\n</code></pre>"},{"location":"SDD/4.4-Complex-Conditional-Statements/#or","title":"<code>or</code>","text":"<p>Check if at least one (or both) of the conditions is true.</p> <p>Example</p> <pre><code>    if weather == \u201crain\u201d or weather == \u201ccloudy\u201d\n        print(\u201cIt is not nice weather today\u201d)\n</code></pre>"},{"location":"SDD/4.4-Complex-Conditional-Statements/#not","title":"<code>not</code>","text":"<p>Check if a condition is not true.</p> <p>Example</p> <pre><code>    if not age &lt; 17\n        print(\u201cYou are not less than 17\u201d)\n        print(\u201cSo you must be at least 17 or over\u201d)\n</code></pre> <p>You MUST to write the full condition out each time.</p> <p>You can\u2019t say:</p> <pre><code>    if weather == \u201crain\u201d or \u201ccloudy\u201d\n</code></pre> <p>You must say:</p> <pre><code>    if weather == \u201crain\u201d or weather == \u201ccloudy\u201d\n</code></pre>"},{"location":"SDD/4.5-Fixed-Loops-%28for%29/","title":"Fixed Loops (for)","text":""},{"location":"SDD/4.5-Fixed-Loops-%28for%29/#explanation","title":"Explanation","text":"<p>So far, when ever we have wanted to output a word multiple times, we have always wrote a new print statement for each line.</p> <p>Example</p> <pre><code>    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n</code></pre> <p>This is very inefficient.</p> <p>Suppose we wanted to change the message - we\u2019d have to go back and change every line individually, taking up time. </p> <p>To fix this we could instead, use a fixed loop.</p> <p>A fixed loop is a loop that repeats a certain (fixed) number of times. </p> <p>This example is exactly the same as the code above, but with much less code.</p> <p>Example</p> <pre><code>    for loop in range(1, 10):\n        print(\u201cHello world\u201d)\n</code></pre> <p>The word loop is a variable that we could use within our code. It is called the loop counter, because it counts how many times the loop has run so far. </p> <p>We could use any other variable name, say bananas:</p> <p>Example</p> <pre><code>    for bananas in range(0, 8):\n        print(bananas)\n</code></pre> <p>This (more complicated) example is a bitmore complicated as it asks the user to enter any number,ten times (0-9). </p> <p>Each time the loop repeats, it asks for another number, and adds it to its running total:</p> <p>Example</p> <pre><code>    # Example with a running total\n    total = 0\n\n    for loop in range(0, 10):\n        number = int(input(\"Please enter a number\"))\n        total = total + number\n\n    # Show total once the loop is done\n    print(total)\n</code></pre>"},{"location":"SDD/4.6-Conditional-Loops-%28while%29/","title":"Conditional Loops (while)","text":""},{"location":"SDD/4.6-Conditional-Loops-%28while%29/#explanation","title":"Explanation","text":"<p>A conditional loop (in Python, a while loop) repeats only while a condition is true. </p> <p>A conditional loop is like a combination of a fixed loop and an if statement and you can use all of the same conditions in a while loop that you would in an if statement.</p> <ul> <li> <p>In this example, the user is asked to enter a number. </p> </li> <li> <p>If the number is more than 100, part of the program repeats, asking them to enter the number again. </p> </li> <li> <p>It only repeats while their input is more than 100. Once that condition is met, the loop stops repeating and the program continues:</p> </li> </ul> <p>Example</p> <pre><code>    # Initialise the variable\n    mynumber = 0\n\n    # Ask the user to enter a number\n    mynumber = int(input(\"Please enter a number\"))\n\n    # Example of a while loop\n    while mynumber &gt; 100:\n        print(\"That number is too big!\")\n        mynumber = int(input(\"Please enter a number\"))\n</code></pre> <p>Warning - Don\u2019t get stuck in an infinite loop!</p> <p>Make sure that your condition will always end.</p> <p>For example, this loop would never end as 100 is always more than 5, so the loop will continue running indefinitely.</p> <pre><code>    while 100 &gt; 5:\n        print(\"One hundred is still more than five\")\n</code></pre>"},{"location":"SDD/4.6-Conditional-Loops-%28while%29/#extension-tasks","title":"Extension Tasks","text":"01 - Fifty or Less <p>Analysis</p> <p>Create a program that will ask a user to enter a number. This number will be added to a total and as long as the total is below 50 it will ask the user to input another number.</p> Inputs Process Output Integer Add integer to total Total If total below 50 Enter another number <p>Pseudocode</p> <code>Main Steps</code> <p>1.0 Set total TO 0 </p> <p>2.0 Start conditional loop</p> <p><code>Refinements</code></p> <code>2.0</code> <p>2.1 While number != 50</p> <p>2.2 Ask user to enter a number</p> <p>2.3 Add number to total</p> <p>2.4 Display total</p>"},{"location":"SDD/4.7-Random/","title":"Random (Pre-Defined Functions)","text":"<p>Something that is random is open to chance - like rolling dice, or tossing a coin.</p> <p>Before we use a random number, we have to put this line at the top of the program:</p> <p>Example</p> <pre><code>    # This program is going to use random numbers\n    import random\n</code></pre> <p>Random will always returns an integer (a whole number) and will only generate a random number that is between two parameters:</p> <p>Example</p> <pre><code>    # Generate a random number from 1 to 6\n    dice = random.randint(1, 6)\n</code></pre> <p>The code above will generate a number that could be either 1, 2, 3, 4, 5 or 6.</p> <p>Complete example:</p> <p>The Random Number Game</p> <pre><code>    # Add the random module\n    import random\n\n    # Ask the user to enter a number\n    guess = int(input(\"What is your guess?\"))\n\n    target = random.randint(1, 10)\n\n    if guess == target:\n        print(\"Well done, you guessed correctly.\")\n    else:\n        print(\"Sorry, you guessed wrongly\")\n</code></pre>"},{"location":"SDD/4.8-Length/","title":"Length (Pre-Defined Functions)","text":"<p>The length function, shortened to len() returns the length - the number of characters - in a string.</p> <p>For example, len(\u201chello\u201d) is 5, and len(\u201cabc\u201d) is 3:</p> <p>This example calculates the length of a word, stores it in a variable called \u201chow_long\u201d, and displays it on the screen.</p> <p>Example</p> <pre><code>    # Stores and displays how many characters are in the word \u201chello\u201d\n    how_long = len(\"hello\")\n\n    print(how_long)\n</code></pre> <p>You could also use len() to ask the user to enter a password, and tell them whether their password is long enough:</p> <p>Example</p> <pre><code>    # Ask the user to enter their password\n    passwd = input(\"Please enter your password\")\n\n    # The password must be at least 6 characters long\n    if len(passwd) &gt; 6:\n        print(\"Your password is long enough\")\n    else:\n        print(\"Your password is NOT long enough\")\n</code></pre> <p>This problem could be refined further by using a loop and asking the user to keep entering their password until it is valid.</p>"},{"location":"SDD/4.9-Round/","title":"Round (Pre-Defined Functions)","text":"<p>Using a round function, we can round a real number either:</p> <ul> <li> <p>To the nearest whole number</p> </li> <li> <p>To a certain number of decimal places.</p> </li> </ul> <p>To round to the nearest whole number (integer):</p> <p>This code would display the number 3.</p> <pre><code>    num1 = round(3.14159265)\n\n    print(num1)\n</code></pre> <p>To round to 2 decimal places:</p> <p>This code would print 3.14.</p> <pre><code>    num2 = round(3.14159265, 2)\n\n    print(num2)\n</code></pre> <p>We could round to any number of decimal places by adding it as a parameter in brackets:</p> <p>This code would round to 5 decimal places (3.14159).</p> <pre><code>    num3 = round(3.14159265, 5)\n\n    print(num3)\n</code></pre>"},{"location":"SDD/5.0-Testing/","title":"Explanation","text":"<p>Testing is something we as programmers do all the time. </p> <p>When you change a program, you run it to check if it works the way you expected. </p> <p>For National 5, we put it into a more formal process.</p>"},{"location":"SDD/5.0-Testing/#expected-outcome","title":"Expected Outcome","text":"<p>What you Need to Know</p> <p>You must be able to Describe, identify, exemplify, and implement normal, extreme, and exceptional test data for a specific problem, using a test table.</p> <p>You must be able to describe and identify syntax, execution, and logic errors.</p>"},{"location":"SDD/5.1-Normal-Extreme-and-Exceptional-Test-Data/","title":"Normal, Extreme and Exceptional Test Data","text":"<p>When we test a program, we use test data. You enter the test data as the inputs to the program. The data should try to capture a range of different scenarios - don\u2019t just test the program with one piece of data.</p> <p>As an example:</p> <p>You are asked to write a program that picks a random number. The user has to guess what number the program has picked. They are asked to enter a number between 0 and 10. If they enter a number outside that range, the program should show an error message.</p> <p>There are three types of data you need to be able to use and give examples of: normal, extreme and exceptional. In this example, the program expects a number between 0 and 10 (inclusive).</p> <p>Image to be added</p> <p>We write this data into a test table. </p> <p>The test table shows the data we test the program with. </p> <p>We put one example in each row of the table (i.e. don\u2019t say \u201canything between 1 and 9\u201d - pick one!)</p> <p>Image to be added</p> <p>In the test table, you should say what you expect the program to do. Some test tables have another column for what actually happened, and you would record this afterwards.</p> <p>Take another example - rolling a dice. </p> <p>You are asked for four pieces of test data: one normal, two extreme and one exceptional. </p> <p>Remember that normal data is definitely within range, extreme is on the edge, but accepted, and exceptional is definitely incorrect. </p> <p>Which values would be valid for a standard 6-sided dice?</p> <p>Image to be added</p>"},{"location":"SDD/5.2-Types-of-Errors/","title":"Types of Errors","text":"<p>There are three types of programming errors that you need to know about - syntax, logic and execution.</p> <p>If you\u2019re given an example of an error, you need to be able to say what type it is.</p> <p>Syntax and logic errors occur when you are writing the program; </p> <p>execution errors happen when the program is running. </p> <p>Of these, syntax errors are usually the easiest to spot.</p> <p>Good test data helps you to find and minimise these errors.</p>"},{"location":"SDD/5.2-Types-of-Errors/#synatx-errors","title":"Synatx Errors","text":"<p>Syntax errors are quite common. You will already have experienced lots of these!</p> <p>Syntax errors happen when you make a mistake in typing your code. </p> <p>These could be spelling mistakes, typing words in the wrong order, or using the wrong symbols.</p> <p>For example:</p> <ul> <li>priiiint instead of print</li> <li>print(\u201cHello,\u201d name) instead of print(\u201cHello\u201d, name)</li> <li>range[0, 10] when it should be range(0, 10)</li> </ul> <p>Syntax errors are about breaking the rules of the language in some way.</p> <p>In Python (specifically), you would see an error message. </p> <p>Look at the message carefully - it tells you which line the error is on (so you don\u2019t need to check your whole program).</p> <p>When you\u2019re doing practical tasks, watch out for these common syntax errors in Python. </p> <p>If you\u2019re not sure what\u2019s causing an error, come back to this page and check your code to see if you\u2019ve included one!</p> Common Syntax ErrorsExplanation <pre><code>print (Hello World) \n\nif age = 17: \n    print(\u201cYou can drive\u201d)\n\nfor counter in range(0, 10)\nprint(\u201cThis happens 10 times\u201d)       \n\nif age &gt;= 17\n    print(\u201cYou can drive\u201d)\nelse:\n    print(\u201cYou can\u2019t drive\u201d)        \n</code></pre> <code>Line 1 - Missing Speechmarks</code> <p>Missing speech marks around a string. It should be (\u201cHello world\u201d).    </p> <code>Line 3 and 5 - Incorrect use of Comparison Operators</code> <p>Should be the double-equals == Remember to use == when you\u2019re checking if two things are equal</p> <code>Line 6 and 7 - Forgot to Indent</code> <p>The line that repeats (print) should be indented (tabbed in) as it\u2019s inside the loop.</p> <code>Line 9, 10, 11 and 12 - Missing Colon</code> <p>Missing the colon ':'\u00a0 at the end of the first line.  If, else and loops should always have a colon, e.g.</p> <pre><code>if age &gt;= 17:\n    print(...)  \n</code></pre>"},{"location":"SDD/5.2-Types-of-Errors/#logic-errors","title":"Logic Errors","text":"<p>Logic errors are a bit  trickier to spot. Logic errors don\u2019t produce error messages. </p> <p>The program still runs, but it doesn\u2019t do what you\u2019d expect.</p> <p>A program is created to check if a number is between 0 and 10.</p> <pre><code>if rating &gt;= 0 and rating &lt;= 100:\n    print(\u201cThat is a rating out of 10\u201d)   \n</code></pre> <p>== This is a logic error, because I typed 100 instead of 10.==</p> <p>The program would still run. There\u2019s no syntax error, so I wouldn\u2019t see an error message. Instead, my logic is wrong.</p> <p>Another example:</p> <p>A program should ask a person\u2019s name and age, and then greet them with their name.</p> <p><pre><code>name = input(\u201cWhat is your name?\u201d)\nage = input(\u201cHow old are you?\u201d)\nprint(\u201cHello\u201d, age, \u201c. You are\u201d, name, \u201cyears old.\u201d)\n</code></pre> That program would still run, but the output wouldn\u2019t make much sense. </p> <p>If Bob, aged 15, enters his name and age, the program as it stands would output \u201cHello 15. You are Bob years old\u201d.</p> <p>Testing with appropriate test data is the best way of tracking down logic errors.</p>"},{"location":"SDD/5.2-Types-of-Errors/#execution-errors","title":"Execution Errors","text":"<p>Execution errors happen when the program is running. </p> <p>Typically, the program will crash with an error message.</p> <p>a program asks for two numbers. It plans to divide them.</p> <p>If the user enters 100 and 0, there will probably be an execution error - the program will crash, because it\u2019s impossible to divide by 0. </p> <p>A really good program will check the numbers first, and if one of them is invalid, it will ask the user to enter it again. </p> <p>This avoids the program crashing, so saves you from the execution error.</p> <p>Common execution errors in Python could involve:</p> <ul> <li>The program asks for a number, but the user enters some text (a string). What happens?</li> <li>Lists (you will study these later): if a list has 10 items, but you try to access the 11th item</li> </ul> <p>We find and (mostly) eliminate execution errors by testing. Exceptional test data is a good way to test for execution errors.</p>"},{"location":"SDD/6.0-Evaluation/","title":"Explanantion","text":"<p>What you Need to Know</p> <p>Describe, identify, and exemplify the evaluation of a solution in terms of:</p> <ul> <li>fitness for purpose</li> <li>efficient use of coding constructs</li> <li>robustness</li> <li> <p>readability:</p> <p>\u2014 internal commentary</p> <p>\u2014 meaningful identifiers</p> <p>\u2014 indentation</p> <p>\u2014 white space</p> </li> </ul> <p>You have to be able to evaluate a program - either yours, or one you\u2019re given - in four categories:</p> <ul> <li>Fitness for purpose</li> <li>Efficient use of coding constructs</li> <li>Robustness</li> <li>Readability</li> </ul> <p>These are very important. </p> <p>You\u2019ll usually be asked for two of these in the assignment. </p> <p>You have to be able to give examples that fit all of these types of evaluation.</p> <p> In the course assignment, it\u2019s really important that you evaluate your own program accurately. If you say that your program is readable, and it isn\u2019t, you would not get the mark. If you evaluate that your program isn\u2019t as readable as it could be, and that\u2019s correct, you would get the mark. In the assignment, the marks are for being honest! </p>"},{"location":"SDD/6.1-Fitness-for-Purpose/","title":"Fitness for Purpose","text":"<p>If your program is fit for purpose, it means it does what it\u2019s supposed to do. </p> <p>If the program meets all of the functional requirements you set out in the analysis, then it is fit for purpose - it does all the things it\u2019s supposed to. </p> <p>If it doesn\u2019t meet one or more, it must not be fit for purpose.</p> <p>When you are doing the evaluation, use the term \u2018fit for purpose\u2019 or \u2018not fit for purpose\u2019 - be explicit. </p> <p>Say why it is or isn\u2019t fit for purpose, mentioning the specific requirement e.g.:</p> <ul> <li> <p>The program is fit for purpose, because it asks the user their age, and shows an error if they enter a negative number</p> </li> <li> <p>The program is not fit for purpose, as it is only supposed to accept percentages between 0 and 100, but it accepts values outside this range</p> </li> </ul> <p>Try to link your answer to exactly which requirement it is. </p> <p>Make sure that your answer links to the program you\u2019re being asked about - don\u2019t say \u201cit doesn\u2019t meet the requirement\u201d, because that could apply to any program. </p> <p>Which requirements are specific to this program?</p> <p>Exam Tip</p> <p>The SQA will sometimes give you programs they\u2019ve written, and ask if they are fit for purpose. </p> <p>Don\u2019t be too kind! </p> <p>If it isn\u2019t fit for purpose, say so. </p> <p>If you try to be polite, and say it\u2019s err\u2026 sorta fit for purpose, when it\u2019s not, you won\u2019t get the mark. Be honest!</p>"},{"location":"SDD/6.2-Efficient-use-of-Coding-Constructs/","title":"Efficient use of Coding Constructs","text":"<p>Efficient use of coding constructs can seem confusing at first. </p> <p>In your exam or the assignment, the SQA tend to be really clear i.e. they usually give you a really bad program that\u2019s very inefficient.</p> <p>Efficiency is about using as few lines as possible. </p> <p>Example</p> InefficentEfficent <pre><code>print(\"Hello. My name is Bob.\")\nprint(\"Hello. My name is Bob.\")\nprint(\"Hello. My name is Bob.\")\nprint(\"Hello. My name is Bob.\")\nprint(\"Hello. My name is Bob.\")\n</code></pre> <pre><code>for loop in range(0, 5):\n    print(\"Hello. My name is Bob.\")\n</code></pre> <p>The program on the left isn\u2019t efficient. It says the same thing over and over again - something that could be done with a loop. </p> <p>The program on the right shows the same message, but it loops 5 times.</p> <p>The program on the right does the same thing much more efficiently because it uses fewer lines of code to achieve the same goal. </p> <p>You\u2019ll get much better at spotting these as you become experienced with Python. </p>"},{"location":"SDD/6.3-Robustness/","title":"Robustness","text":"<p>A robust program doesn\u2019t crash when the user enters exceptional data. </p> <p>Example</p> <p>A program is created to take the age of a person. </p> <p>If the user enters a negative number (no one has a negative age!) the program shouldn\u2019t just crash - it should show an error message and ask them to enter it again.</p> <p>You can test robustness using exceptional test data i.e. how does the program behave if you enter exceptional data? If it crashes, the program isn\u2019t robust. </p> <p>If it can cope with errors (e.g. by asking them nicely to enter it again), it is robust, and you can say this in your evaluation.</p>"},{"location":"SDD/6.4-Readability/","title":"Readability","text":"<p>Readability is about making your program easy for you, or other programmers after you, to read and understand. </p> <p>There are four ways that you can make your code readable, and you are expected to do these in your work. </p> <p>The coursework assignment includes marks for readable code using these four methods.</p>"},{"location":"SDD/6.4-Readability/#internal-commentary","title":"Internal Commentary","text":"<p>Your code should contain internal commentary. </p> <p>Comments are notes that you leave to yourself, or other programmers, to explain what\u2019s going on. </p> <p>The computer ignores them when translating the program.</p> <p>I always use internal commentary in the examples I give you, and you\u2019re expected to do the same. </p> <p>Example of Internal Commentary in Python</p> <pre><code># This is an internal comment\n# The computer ignores these lines\n</code></pre>"},{"location":"SDD/6.4-Readability/#meaningful-identifiers","title":"Meaningful identifiers","text":"<p>Sometimes also called meaningful variable names. </p> <p>When you look at your program, do the variable names help you to understand it? If so, you\u2019ve probably used meaningful names.</p> <p>In short, don\u2019t call your variables things like x or k. </p> <p>Give them more suitable names like age, password, multiplier - whatever! Although the computer ignores the names of variables, you gain marks for using names that make the program easier for humans to understand.</p> <p>Example</p> Not MeaningfulMeaningful <pre><code>p = input(\u201cWhat is your age?\u201d)\n= input(\u201cWhat is your name?\u201d)\n\nprint(\u201cHello\u201d, x)\nprint(\u201cYou are\u201d, p, \u201cyears old.\u201d)\n</code></pre> <pre><code>age = input(\u201cWhat is your age?\u201d)\nname = input(\u201cWhat is your name?\u201d)\n\nprint(\u201cHello\u201d, name)\nprint(\u201cYou are\u201d, age, \u201cyears old.\u201d)\n</code></pre> <p>The program on the left is shorter, but the programmer is more likely to make a mistake and mix up x and p.</p> <p>This becomes even worse in longer programs. Save yourself the trouble by using meaningful variable names.</p>"},{"location":"SDD/6.4-Readability/#indentation","title":"Indentation","text":"<p>Indentation means that code is \u201ctabbed in\u201d from the side, so that it\u2019s clear what loops or if statements it belongs to. </p> <p>This is especially true in Python, because in fact, code has to be indented to work properly.</p> <p>Example</p> Not IndentedIndented <pre><code>if age &gt;= 17:\nprint(\u201cYou can learn to drive\u201d)\nelse:\nprint(\u201cYou can\u2019t learn yet...\")\n</code></pre> <pre><code>if age &gt;= 17:\n    print(\u201cYou can learn to drive\u201d)\nelse:\n    print(\u201cYou can\u2019t learn yet...\")\n</code></pre> <p>In the program on the right, it\u2019s easier to see that the two print lines belong to the if and else.</p> <p>You already do this in Python, just remember to talk about it in your evaluation!</p>"},{"location":"SDD/6.4-Readability/#whitespace","title":"Whitespace","text":"<p>Whitespace is about leaving blank lines between pieces of code. This spaces things out and makes it a little easier to see what belongs together. </p> <p>I always leave whitespace in the practical examples I give you - blank lines so that related pieces of code are grouped together. </p> <p>I\u2019ve done it with paragraphs in these lesson notes!</p> <p>Real programs often run into thousands of lines of code. </p> <p>Think how hard those would be to read if the lines were all jammed together with no blank spaces.</p>"},{"location":"SDD/6.5-Summary-Evaluation/","title":"Evaluation Summary","text":"<p>Make sure that you can evaluate your program in the four areas - fitness for purpose, robustness, readability and efficiency of coding constructs. You\u2019ll normally be given the names, but you have to recall what they mean.</p> <p>For example, the coursework assignment usually contains a section laid out like this:</p> <p>Evaluate your program in terms of:</p> <p><code>Fitness for purpose (1 mark)</code> - My program is fit for purpose because .......</p> <p><code>Robustness (1 mark)</code> - My program is not robust, because if the user enters a string instead of a number the program crashes (an execution error).</p> <p><code>Readability (2 marks)</code> - My program is readable because I used meaningful variable names like \u201cscore\u201d instead of just calling it num1, num2, etc.  However, I could have made it more readable if I had used internal commentary.</p> <p>You are expected to make points in each box - this can be a good way to gain marks in the programming part of the assignment, so long as you prepare! </p> <p>Be honest - you get more marks for constructive criticism than saying the program does something, when it doesn\u2019t.</p>"}]}